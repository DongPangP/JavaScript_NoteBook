{
  /*
    tsconfig.json 是ts编译器的配置文件，ts编译器可以根据它的信息来对代码进行编译
      "include" 用来指定哪些ts文件需要被编译
        路径：** 表示任意目录
              * 表示任意文件
      "exclude" 不需要被编译的文件目录
        默认值：["node_modules","bower_components","jspm_packages"]
      
      "extends" 定义被继承的配置文件
        示例： "extends": "./configs/base"
          上述实例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息。
      
      "files" 指定被编译文件的列表，只有需要编译的文件少时才会用到
        示例： 
            "files": [
                "core.ts",
                "sys.ts",
                "types.ts"
            ]    
  */
  "include": [
    "./src/**/*"
  ],
  // "exclude": [
  //   "./src/hello/**/*"
  // ]

  /*
    compilerOptions 编译器选项
  */
  "compilerOptions": {
    // target 用来指定 ts 被编译为的 es 的版本
    "target": "ES2015",
    // module 指定要使用的模块化的规范
    // "none","commonjs","amd","system","umd","es6","es2015","es2020","esnext"
    "module": "es2015",
    // lib用来指定项目中要使用的库
    // "lib": []

    // outDir 用来指定编译后文件所在的目录
    "outDir": "./dist",

    // 将代码合并为一个文件
    // 设置outFile后，所有的全局作用域中的代码会合并到同一个文件中
    // "outFile": "./dist/app.js"

    // 是否对 js 文件进行编译，默认 false
    "allowJs": true,
    // 是否检测js代码是否符合语法规范，默认是false
    "checkJs": true,
    // 是否移除注释
    "removeComments": true,
    // 不生成编译后的文件
    "noEmit": false,
    // 当有错误时不生成编译后的文件
    "noEmitOnError": true,
    // 用来设置编译后的文件是否使用严格模式，默认false
    "alwaysStrict": true,
    // 不允许隐式的any类型
    "noImplicitAny": true,
  }
}